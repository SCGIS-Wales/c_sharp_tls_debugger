name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release

    - name: Publish
      run: dotnet publish -c Release -o ./publish

    - name: List published files
      run: ls -R ./publish

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: MTLSExample
        path: ./publish

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: MTLSExample
        path: ./publish

    - name: List downloaded files
      run: ls -R ./publish

    - name: Bump Version and Tag
      id: bump_version
      uses: actions/github-script@v6
      with:
        script: |
          const semver = require('semver');
          const core = require('@actions/core');

          // Get the latest release
          const latestRelease = await github.repos.getLatestRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          // Parse the version
          const latestVersion = latestRelease.data.tag_name;
          const newVersion = semver.inc(latestVersion, 'patch'); // You can adjust 'patch' to 'minor' or 'major' as needed

          // Create a new tag
          await github.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `refs/tags/${newVersion}`,
            sha: context.sha,
          });

          core.setOutput('new_version', newVersion);

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: ./publish/MTLSExample.exe
        tag_name: ${{ steps.bump_version.outputs.new_version }}
        release_name: Release ${{ steps.bump_version.outputs.new_version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
